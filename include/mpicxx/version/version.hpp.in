/**
 * @file
 * @author Marcel Breyer
 * @date 2020-07-19
 * @copyright This file is distributed under the MIT License.
 *
 * @brief Implements functions to query the current mpicxx and
 *        [MPI (library) version](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node209.htm).
 */

#ifndef MPICXX_VERSION_HPP
#define MPICXX_VERSION_HPP

#include <fmt/format.h>
#include <mpi.h>

#include <string>
#include <string_view>

namespace mpicxx::version {

    /// @name version details specific to the mpicxx library
    ///@{
    /**
     * @brief The name of the mpicxx library.
     * @details The value gets automatically set during the [`CMake`](https://cmake.org/) configuration step.
     */
    inline constexpr std::string_view name = "@PROJECT_NAME@";
    /**
     * @brief The current version of the mpicxx library.
     * @details The value gets automatically set during the [`CMake`](https://cmake.org/) configuration step.
     *
     *    It's in the form of `"version_major.version_minor.version_patch"`.
     */
    inline constexpr std::string_view version = "@PROJECT_VERSION@";
    /**
     * @brief The current major version of the mpicxx library.
     * @details The value gets automatically set during the [`CMake`](https://cmake.org/) configuration step.
     */
    inline constexpr int version_major = @PROJECT_VERSION_MAJOR@;
    /**
     * @brief The current minor version of the mpicxx library.
     * @details The value gets automatically set during the [`CMake`](https://cmake.org/) configuration step.
     */
    inline constexpr int version_minor = @PROJECT_VERSION_MINOR@;
    /**
     * @brief The current patch version of the mpicxx library.
     * @details The value gets automatically set during the [`CMake`](https://cmake.org/) configuration step.
     */
    inline constexpr int version_patch = @PROJECT_VERSION_PATCH@;
    ///@}

    /// @name version details specific to the used MPI standard
    ///@{
    namespace detail {
        /*
         * @brief The current version of the used MPI standard.
         * @return a pair containing the major and minor MPI standard version
         *
         * @calls{ int MPI_Get_version(int *version, int *subversion);      // exactly once }
         */
        inline std::pair<int, int> get_mpi_version() {
            int version, subversion;
            MPI_Get_version(&version, &subversion);
            return std::make_pair(version, subversion);
        }
    }
    /**
     * @brief The current version of the used MPI standard.
     * @details It's in the form of `"mpi_version_major.mpi_version_minor"`.
     *
     *    This function can be called before @ref mpicxx::init() and after @ref mpicxx::finalize() and is thread safe as required by
     *          the [MPI standard 3.1](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf).
     * @return the MPI standard version
     * @nodiscard
     *
     * @calls{ int MPI_Get_version(int *version, int *subversion);    // exactly once }
     */
    [[nodiscard]]
    inline std::string mpi_version() {
        const std::pair<int, int> version = detail::get_mpi_version();
        return fmt::format("{}.{}", version.first, version.second);
    }
    /**
     * @brief The current major version of the used MPI standard.
     * @details This function can be called before @ref mpicxx::init() and after @ref mpicxx::finalize() and is thread safe as required by
     *          the [MPI standard 3.1](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf).
     * @return the MPI standard major version
     * @nodiscard
     *
     * @calls{ int MPI_Get_version(int *version, int *subversion);    // exactly once }
     */
    [[nodiscard]]
    inline int mpi_version_major() {
        return detail::get_mpi_version().first;
    }
    /**
     * @brief The current minor version (subversion) of the used MPI standard.
     * @details This function can be called before @ref mpicxx::init() and after @ref mpicxx::finalize() and is thread safe as required by
     *          the [MPI standard 3.1](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf).
     * @return the MPI standard minor version
     * @nodiscard
     *
     * @calls{ int MPI_Get_version(int *version, int *subversion);    // exactly once }
     */
    [[nodiscard]]
    inline int mpi_version_minor() {
        return detail::get_mpi_version().second;
    }
    ///@}

    /// @name version details specific to the used MPI library
    ///@{
    /**
     * @brief The current version of the used MPI library (library specific implementation defined).
     * @details This function can be called before @ref mpicxx::init() and after @ref mpicxx::finalize() and is thread safe as required by
     *          the [MPI standard 3.1](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf).
     * @return a library specific version string
     * @nodiscard
     *
     * @calls{ int MPI_Get_library_version(char *version, int *resultlen);    // exactly once }
     */
    [[nodiscard]]
    inline std::string mpi_library_version() {
        char library_version[MPI_MAX_LIBRARY_VERSION_STRING];
        int resultlen;
        MPI_Get_library_version(library_version, &resultlen);
        return std::string(library_version, resultlen);
    }
    /**
     * @brief The name of the used MPI library.
     * @details The name is one of: `"Open MPI"`, `"MPICH"`, `"Intel MPI Library"` or `"other"`.
     *
     *    This function can be called before @ref mpicxx::init() and after @ref mpicxx::finalize() and is thread safe as required by
     *          the [MPI standard 3.1](https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf).
     * @return the name of the used MPI library
     * @nodiscard
     *
     * @calls{ int MPI_Get_library_version(char *version, int *resultlen);    // exactly once }
     */
    [[nodiscard]]
    inline std::string mpi_library_name() {
        using namespace std::string_literals;
        const std::string library_version = mpi_library_version();
        if (library_version.find("Open MPI"s) != std::string::npos) {
            return "Open MPI"s;
        } else if (library_version.find("MPICH"s) != std::string::npos) {
            return "MPICH"s;
        } else if (library_version.find("Intel"s) != std::string::npos) {
            return "Intel MPI Library"s;
        } else {
            return "other"s;
        }
    }
    ///@}

}

#endif // MPICXX_VERSION_HPP